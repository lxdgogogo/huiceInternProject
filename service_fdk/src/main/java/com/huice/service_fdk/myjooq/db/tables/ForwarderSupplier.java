/*
 * This file is generated by jOOQ.
 */
package com.huice.service_fdk.myjooq.db.tables;


import com.huice.service_fdk.myjooq.db.FdkGoods2;
import com.huice.service_fdk.myjooq.db.Indexes;
import com.huice.service_fdk.myjooq.db.Keys;
import com.huice.service_fdk.myjooq.db.tables.records.ForwarderSupplierRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 销售商已创建的代拿供货商|刘宇晴|2021-06-08
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ForwarderSupplier extends TableImpl<ForwarderSupplierRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fdk_goods2.forwarder_supplier</code>
     */
    public static final ForwarderSupplier FORWARDER_SUPPLIER = new ForwarderSupplier();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ForwarderSupplierRecord> getRecordType() {
        return ForwarderSupplierRecord.class;
    }

    /**
     * The column <code>fdk_goods2.forwarder_supplier.id</code>.
     */
    public final TableField<ForwarderSupplierRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>fdk_goods2.forwarder_supplier.merchant_id</code>. 销售商merchant_id|刘宇晴|2021-06-08
     */
    public final TableField<ForwarderSupplierRecord, Long> MERCHANT_ID = createField(DSL.name("merchant_id"), SQLDataType.BIGINT.nullable(false), this, "销售商merchant_id|刘宇晴|2021-06-08");

    /**
     * The column <code>fdk_goods2.forwarder_supplier.forwarder_supplier_id</code>. 代拿端供货商id |刘宇晴|2021-06-08
     */
    public final TableField<ForwarderSupplierRecord, Long> FORWARDER_SUPPLIER_ID = createField(DSL.name("forwarder_supplier_id"), SQLDataType.BIGINT.nullable(false), this, "代拿端供货商id |刘宇晴|2021-06-08");

    /**
     * The column <code>fdk_goods2.forwarder_supplier.city</code>. 城市 |刘宇晴|2021-06-08
     */
    public final TableField<ForwarderSupplierRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(255).nullable(false), this, "城市 |刘宇晴|2021-06-08");

    /**
     * The column <code>fdk_goods2.forwarder_supplier.city_code</code>. 城市编码 |刘宇晴|2021-06-08
     */
    public final TableField<ForwarderSupplierRecord, Long> CITY_CODE = createField(DSL.name("city_code"), SQLDataType.BIGINT.nullable(false), this, "城市编码 |刘宇晴|2021-06-08");

    /**
     * The column <code>fdk_goods2.forwarder_supplier.market</code>. 市场 |刘宇晴|2021-06-08
     */
    public final TableField<ForwarderSupplierRecord, String> MARKET = createField(DSL.name("market"), SQLDataType.VARCHAR(255).nullable(false), this, "市场 |刘宇晴|2021-06-08");

    /**
     * The column <code>fdk_goods2.forwarder_supplier.market_code</code>. 市场编码 |刘宇晴|2021-06-08
     */
    public final TableField<ForwarderSupplierRecord, Long> MARKET_CODE = createField(DSL.name("market_code"), SQLDataType.BIGINT.nullable(false), this, "市场编码 |刘宇晴|2021-06-08");

    /**
     * The column <code>fdk_goods2.forwarder_supplier.floor</code>. 楼层 |刘宇晴|2021-06-08
     */
    public final TableField<ForwarderSupplierRecord, String> FLOOR = createField(DSL.name("floor"), SQLDataType.VARCHAR(255).nullable(false), this, "楼层 |刘宇晴|2021-06-08");

    /**
     * The column <code>fdk_goods2.forwarder_supplier.floor_code</code>. 楼层编码 |刘宇晴|2021-06-08
     */
    public final TableField<ForwarderSupplierRecord, Long> FLOOR_CODE = createField(DSL.name("floor_code"), SQLDataType.BIGINT.nullable(false), this, "楼层编码 |刘宇晴|2021-06-08");

    /**
     * The column <code>fdk_goods2.forwarder_supplier.business</code>. 档口 |刘宇晴|2021-06-08
     */
    public final TableField<ForwarderSupplierRecord, String> BUSINESS = createField(DSL.name("business"), SQLDataType.VARCHAR(255).nullable(false), this, "档口 |刘宇晴|2021-06-08");

    /**
     * The column <code>fdk_goods2.forwarder_supplier.supplier_name</code>. 供货商全名 |刘宇晴|2021-06-08
     */
    public final TableField<ForwarderSupplierRecord, String> SUPPLIER_NAME = createField(DSL.name("supplier_name"), SQLDataType.VARCHAR(255).nullable(false), this, "供货商全名 |刘宇晴|2021-06-08");

    /**
     * The column <code>fdk_goods2.forwarder_supplier.group_name</code>. 分组 |刘宇晴|2021-06-08
     */
    public final TableField<ForwarderSupplierRecord, String> GROUP_NAME = createField(DSL.name("group_name"), SQLDataType.VARCHAR(255).nullable(false), this, "分组 |刘宇晴|2021-06-08");

    /**
     * The column <code>fdk_goods2.forwarder_supplier.created</code>.
     */
    public final TableField<ForwarderSupplierRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>fdk_goods2.forwarder_supplier.modified</code>.
     */
    public final TableField<ForwarderSupplierRecord, LocalDateTime> MODIFIED = createField(DSL.name("modified"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private ForwarderSupplier(Name alias, Table<ForwarderSupplierRecord> aliased) {
        this(alias, aliased, null);
    }

    private ForwarderSupplier(Name alias, Table<ForwarderSupplierRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("销售商已创建的代拿供货商|刘宇晴|2021-06-08"), TableOptions.table());
    }

    /**
     * Create an aliased <code>fdk_goods2.forwarder_supplier</code> table reference
     */
    public ForwarderSupplier(String alias) {
        this(DSL.name(alias), FORWARDER_SUPPLIER);
    }

    /**
     * Create an aliased <code>fdk_goods2.forwarder_supplier</code> table reference
     */
    public ForwarderSupplier(Name alias) {
        this(alias, FORWARDER_SUPPLIER);
    }

    /**
     * Create a <code>fdk_goods2.forwarder_supplier</code> table reference
     */
    public ForwarderSupplier() {
        this(DSL.name("forwarder_supplier"), null);
    }

    public <O extends Record> ForwarderSupplier(Table<O> child, ForeignKey<O, ForwarderSupplierRecord> key) {
        super(child, key, FORWARDER_SUPPLIER);
    }

    @Override
    public Schema getSchema() {
        return FdkGoods2.FDK_GOODS2;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FORWARDER_SUPPLIER_IDX_MID_CITY_MARKET_FLOOR, Indexes.FORWARDER_SUPPLIER_IDX_MID_SUPNAME);
    }

    @Override
    public Identity<ForwarderSupplierRecord, Long> getIdentity() {
        return (Identity<ForwarderSupplierRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ForwarderSupplierRecord> getPrimaryKey() {
        return Keys.KEY_FORWARDER_SUPPLIER_PRIMARY;
    }

    @Override
    public List<UniqueKey<ForwarderSupplierRecord>> getKeys() {
        return Arrays.<UniqueKey<ForwarderSupplierRecord>>asList(Keys.KEY_FORWARDER_SUPPLIER_PRIMARY, Keys.KEY_FORWARDER_SUPPLIER_UK_MID_FSUPID);
    }

    @Override
    public ForwarderSupplier as(String alias) {
        return new ForwarderSupplier(DSL.name(alias), this);
    }

    @Override
    public ForwarderSupplier as(Name alias) {
        return new ForwarderSupplier(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ForwarderSupplier rename(String name) {
        return new ForwarderSupplier(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ForwarderSupplier rename(Name name) {
        return new ForwarderSupplier(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, Long, Long, String, Long, String, Long, String, Long, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
